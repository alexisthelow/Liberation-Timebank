package data;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.fasterxml.jackson.databind.ObjectMapper;

import entities.MessageThread;
import entities.Reply;
import entities.User;

@Transactional
@Repository
public class MessageDAOImpl implements MessageDAO {

	@PersistenceContext
	EntityManager em;
	
	@Override
	public MessageThread createMessageThread(int userId, int[] recipientIds, String messageThreadJson, String replyJson) {
		ObjectMapper mapper = new ObjectMapper();
		MessageThread newThread = null;
		Set<User> recipients = new HashSet<>();
		
		for (int id : recipientIds) {
			recipients.add(em.find(User.class, id));
		}
		
		try {
			newThread = mapper.readValue(messageThreadJson, MessageThread.class);
			newThread.setMessageThreadParticipants(recipients);
			newThread.setCreated(new Timestamp(System.currentTimeMillis()));
			em.persist(newThread);
			em.flush();
			createReply(userId, newThread.getId(), replyJson);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return em.find(MessageThread.class, newThread.getId());
	}

	@Override
	public Reply createReply(int userId, int threadId, String replyJson) {
		ObjectMapper mapper = new ObjectMapper();
		Reply newReply = null;
		
		try {
			newReply = mapper.readValue(replyJson, Reply.class);
			newReply.setPosted(new Timestamp(System.currentTimeMillis()));
			newReply.setParentMessageThread(em.find(MessageThread.class, threadId));
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return newReply;
	}

	@Override
	public MessageThread showMessageThread(int threadId) {
		return em.find(MessageThread.class, threadId);
	}

	@Override
	public List<MessageThread> getUserMessageThreads(int userId) {
		return new ArrayList<MessageThread>(em.find(User.class, userId).getUserMessageThreads());
	}

	@Override
	public List<Reply> showMessageThreadReplies(int threadId) {
		return new ArrayList<>(em.find(MessageThread.class, threadId).getMessageThreadReplies());
	}

	@Override
	public Reply showReply(int replyId) {
		return em.find(Reply.class, replyId);
	}

	@Override
	public MessageThread updateMessageThread(int userId, int threadId, String threadJson) {
		ObjectMapper mapper = new ObjectMapper();
		MessageThread managedThread = em.find(MessageThread.class, threadId);
		MessageThread newThread = null;
		
		try {
			newThread = mapper.readValue(threadJson, MessageThread.class);
			managedThread.setMessageThreadParticipants(newThread.getMessageThreadParticipants());
			managedThread.setMessageThreadReplies(newThread.getMessageThreadReplies());
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return managedThread;
	}

	@Override
	public Reply updateReply(int userId, int replyId, String replyJson) {
		ObjectMapper mapper = new ObjectMapper();
		Reply managedReply = em.find(Reply.class, replyId);
		Reply newReply = null;
		
		try {
			newReply = mapper.readValue(replyJson, Reply.class);
			managedReply.setLastUpdate(new Timestamp(System.currentTimeMillis()));
			managedReply.setLastUpdateUser(em.find(User.class, userId));
			managedReply.setMessage(newReply.getMessage());
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return managedReply;
	}

}
