package data;

import java.sql.Timestamp;
import java.util.Set;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.fasterxml.jackson.databind.ObjectMapper;

import entities.ItemLoanOffer;
import entities.ItemLoanOfferActivity;
import entities.ItemLoanRequest;
import entities.ItemLoanRequestActivity;
import entities.ItemTransferOffer;
import entities.ItemTransferOfferActivity;
import entities.ItemTransferRequest;
import entities.ItemTransferRequestActivity;
import entities.ServiceOffer;
import entities.ServiceOfferActivity;
import entities.ServiceRequest;
import entities.ServiceRequestActivity;
import entities.User;
import interfaces.Activity;

@Transactional
@Repository
public class ActivityDAOImpl implements ActivityDAO {

	@PersistenceContext
	EntityManager em;
	
	@Override
	public Activity createActivity(String activityJson) {
		ObjectMapper mapper = new ObjectMapper();
		
		try {
			
		}
		catch (Exception e) {
			System.err.println("Could not map activity at ActivityDAOImpl.createActivity()");
			System.err.println("activityJson: " + activityJson);
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public ItemTransferOfferActivity createItemTransferOfferActivity(int offerId, String activityJson) {
		ObjectMapper mapper = new ObjectMapper();
		ItemTransferOfferActivity newActivity = null;
		
		try {
			newActivity = mapper.readValue(activityJson, ItemTransferOfferActivity.class);
			em.persist(newActivity);
			em.flush();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return newActivity;
	}

	@Override
	public ItemTransferRequestActivity createItemTransferRequestActivity(int requestId, String activityJson) {
		ObjectMapper mapper = new ObjectMapper();
		ItemTransferRequestActivity newActivity = null;
		
		try {
			newActivity = mapper.readValue(activityJson, ItemTransferRequestActivity.class);
			em.persist(newActivity);
			em.flush();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return newActivity;	}

	@Override
	public ItemLoanOfferActivity createItemLoanOfferActivity(int offerId, String activityJson) {
		ObjectMapper mapper = new ObjectMapper();
		ItemLoanOfferActivity newActivity = null;
		
		try {
			newActivity = mapper.readValue(activityJson, ItemLoanOfferActivity.class);
			em.persist(newActivity);
			em.flush();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return newActivity;	}

	@Override
	public ItemLoanRequestActivity createItemLoanRequestActivity(int requestId, String activityJson) {
		ObjectMapper mapper = new ObjectMapper();
		ItemLoanRequestActivity newActivity = null;
		
		try {
			newActivity = mapper.readValue(activityJson, ItemLoanRequestActivity.class);
			em.persist(newActivity);
			em.flush();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return newActivity;
	}

	@Override
	public ServiceOfferActivity createServiceOfferActivity(int offerId, String activityJson) {
		ObjectMapper mapper = new ObjectMapper();
		ServiceOfferActivity newActivity = null;
		
		try {
			newActivity = mapper.readValue(activityJson, ServiceOfferActivity.class);
			em.persist(newActivity);
			em.flush();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return newActivity;
	}

	@Override
	public ServiceRequestActivity createServiceRequestActivity(int requestId, String activityJson) {
		ObjectMapper mapper = new ObjectMapper();
		ServiceRequestActivity newActivity = null;
		
		try {
			newActivity = mapper.readValue(activityJson, ServiceRequestActivity.class);
			em.persist(newActivity);
			em.flush();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return newActivity;
	}

	@Override
	public Set<Activity> indexItemTransferOfferActivity(int itemTransferOfferId) {
		ItemTransferOffer managed = em.find(ItemTransferOffer.class, itemTransferOfferId);
		return managed.getItemTransferOfferActivity();
	}

	@Override
	public Set<Activity> indexItemTransferRequestActivity(int itemTransferRequestId) {
		ItemTransferRequest managed = em.find(ItemTransferRequest.class, itemTransferRequestId);
		return managed.getItemTransferRequestActivity();
	}

	@Override
	public Set<Activity> indexItemLoanOfferActivity(int itemLoanOfferId) {
		ItemLoanOffer managed = em.find(ItemLoanOffer.class, itemLoanOfferId);
		return managed.getItemLoanOfferActivities();
	}

	@Override
	public Set<Activity> indexItemLoanRequestActivity(int itemLoanRequestId) {
		ItemLoanRequest managed = em.find(ItemLoanRequest.class, itemLoanRequestId);
		return managed.getItemLoanRequestActivities();
	}

	@Override
	public Set<Activity> indexServiceOfferActivity(int serviceOfferId) {
		ServiceOffer managed = em.find(ServiceOffer.class, serviceOfferId);
		return managed.getServiceOfferActivities();
	}

	@Override
	public Set<Activity> indexServiceRequestActivity(int serviceRequestId) {
		ServiceRequest managed = em.find(ServiceRequest.class, serviceRequestId);
		return managed.getServiceRequestActivities();	
	}
	
	@Override
	public Set<Activity> indexActivity(Object parent) {
		if (parent instanceof ServiceOffer) {
			return em.find(ServiceOffer.class, ((ServiceOffer) parent).getId()).getActivity();
		}
		else if (parent instanceof ServiceRequest) {
			return em.find(ServiceRequest.class, ((ServiceRequest) parent).getId()).getActivity();
		}
		else if (parent instanceof ItemTransferOffer) {
			return em.find(ItemTransferOffer.class, ((ItemTransferOffer) parent).getId()).getActivity();
		}
		else if (parent instanceof ItemTransferRequest) {
			return em.find(ItemTransferRequest.class, ((ItemTransferRequest) parent).getId()).getActivity();
		}
		else if (parent instanceof ItemLoanOffer) {
			return em.find(ItemLoanOffer.class, ((ItemLoanOffer) parent).getId()).getActivity();
		}
		else if (parent instanceof ItemLoanRequest) {
			return em.find(ItemLoanRequest.class, ((ItemLoanRequest) parent).getId()).getActivity();
		}
		else {
			System.err.println("Could not find activity for object " + parent.toString());
			return null;
		}
	}

	@Override
	public Activity mapActivity(String activityJson) {
		ObjectMapper mapper = new ObjectMapper();
		Activity newActivity = null;
		
		try {
			newActivity = mapper.readValue(activityJson, Activity.class);
		}
		catch (Exception e) {
			System.err.println("Failed to map activity json at ActivityDAOImpl.updateActivity()");
			System.err.println("activityJson: " + activityJson);
			e.printStackTrace();
		}
		
		return newActivity;
	}
	
	@Override
	public Activity updateActivity(int userId, Activity managedActivity, Activity newActivity) {
		User actingUser = em.find(User.class, userId);
		managedActivity.setLastUpdate(new Timestamp(System.currentTimeMillis()));
		managedActivity.setLastUpdateUser(actingUser);
		managedActivity.setMessage(newActivity.getMessage());
		return managedActivity;
	}

//	@Override
//	public Activity updateItemTransferOfferActivity(int userId, int activityId, String activityJson) {
//		Activity newActivity = mapActivity(activityJson);
//		Activity managedActivity = em.find(Activity.class, activityId);
//		return updateActivity(userId, managedActivity, newActivity);
//		
////		ObjectMapper mapper = new ObjectMapper();
////		ItemTransferOfferActivity managedActivity = em.find(ItemTransferOfferActivity.class, activityId);
////		Activity newActivity = mapActivity(userId, activityJson);
////		
////		try {
////			managedActivity.setLastUpdate(newActivity.getLastUpdate());
////			managedActivity.setLastUpdateUser(newActivity.getLastUpdateUser());
////			managedActivity.setMessage(newActivity.getMessage());
////		}
////		catch (Exception e) {
////			e.printStackTrace();
////		}
////		return managedActivity;
//	}
//	
//	@Override
//	public Activity updateItemTransferRequestActivity(int userId, int activityId, String activityJson) {
//		ObjectMapper mapper = new ObjectMapper();
//		ItemTransferRequestActivity managedActivity = em.find(ItemTransferRequestActivity.class, activityId);
//		ItemTransferRequestActivity newActivity = null;
//		
//		try {
//			newActivity = mapper.readValue(activityJson, ItemTransferRequestActivity.class);
//			managedActivity.setMessage(newActivity.getMessage());
//			managedActivity.setLastUpdate(new Timestamp(System.currentTimeMillis()));
//			managedActivity.setLastUpdateUser(em.find(User.class, userId));
//			
//		}
//		catch (Exception e) {
//			e.printStackTrace();
//		}
//		return managedActivity;
//	}
//
//	@Override
//	public Activity updateItemLoanOfferActivity(int userId, int activityId, String activityJson) {
//		ObjectMapper mapper = new ObjectMapper();
//		ItemLoanOfferActivity managedActivity = em.find(ItemLoanOfferActivity.class, activityId);
//		ItemLoanOfferActivity newActivity = null;
//		
//		try {
//			newActivity = mapper.readValue(activityJson, ItemLoanOfferActivity.class);
//			managedActivity.setMessage(newActivity.getMessage());
//			managedActivity.setLastUpdate(new Timestamp(System.currentTimeMillis()));
//			managedActivity.setLastUpdateUser(em.find(User.class, userId));
//			
//		}
//		catch (Exception e) {
//			e.printStackTrace();
//		}
//		return managedActivity;
//	}
//
//	@Override
//	public Activity updateItemLoanRequestActivity(int userId, int activityId, String activityJson) {
//		ObjectMapper mapper = new ObjectMapper();
//		ItemLoanRequestActivity managedActivity = em.find(ItemLoanRequestActivity.class, activityId);
//		ItemLoanRequestActivity newActivity = null;
//		
//		try {
//			newActivity = mapper.readValue(activityJson, ItemLoanRequestActivity.class);
//			managedActivity.setMessage(newActivity.getMessage());
//			managedActivity.setLastUpdate(new Timestamp(System.currentTimeMillis()));
//			managedActivity.setLastUpdateUser(em.find(User.class, userId));
//			
//		}
//		catch (Exception e) {
//			e.printStackTrace();
//		}
//		return managedActivity;
//	}
//
//	@Override
//	public Activity updateServiceOfferActivity(int userId, int activityId, String activityJson) {
//		ObjectMapper mapper = new ObjectMapper();
//		ServiceOfferActivity managedActivity = em.find(ServiceOfferActivity.class, activityId);
//		ServiceOfferActivity newActivity = null;
//		
//		try {
//			newActivity = mapper.readValue(activityJson, ServiceOfferActivity.class);
//			managedActivity.setMessage(newActivity.getMessage());
//			managedActivity.setLastUpdate(new Timestamp(System.currentTimeMillis()));
//			managedActivity.setLastUpdateUser(em.find(User.class, userId));
//			
//		}
//		catch (Exception e) {
//			e.printStackTrace();
//		}
//		return managedActivity;
//	}
//
//	@Override
//	public Activity updateServiceRequestActivity(int userId, int activityId, String activityJson) {
//		ObjectMapper mapper = new ObjectMapper();
//		ServiceRequestActivity managedActivity = em.find(ServiceRequestActivity.class, activityId);
//		ServiceRequestActivity newActivity = null;
//		
//		try {
//			newActivity = mapper.readValue(activityJson, ServiceRequestActivity.class);
//			managedActivity.setMessage(newActivity.getMessage());
//			managedActivity.setLastUpdate(new Timestamp(System.currentTimeMillis()));
//			managedActivity.setLastUpdateUser(em.find(User.class, userId));
//			
//		}
//		catch (Exception e) {
//			e.printStackTrace();
//		}
//		return managedActivity;
//	}

}
