package entities;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
@Table(name = "user_account")
public class User {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	
	@Column(name = "first_name")
	private String firstName;
	
	@Column(name = "lastName")
	private String lastName;
	
	@JsonIgnore
	@JoinColumn(name = "address_id")
	private Address userAddress;
	
	private String email;
	
	@Column(name = "password")
	private String hashedPassword;
	
	@Column(name = "password_salt")
	private String passwordSalt;
	
	@Column(name = "password_hash")
	private String passwordHash;
	
	//services
	
	@JsonIgnore
	@OneToMany(mappedBy = "serviceOfferUser", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<ServiceOffer> userServiceOffers;
	
	@JsonIgnore
	@OneToMany(mappedBy = "serviceRequestUser", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<ServiceRequest> userServiceRequests;
	
	//item transfers
	
	@JsonIgnore
	@OneToMany(mappedBy = "itemOfferUser", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<ItemTransferOffer> userItemOffers;
	
	@JsonIgnore
	@OneToMany(mappedBy = "itemRequestUser", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<ItemTransferRequest> userItemRequests;
	
	//item borrows
	
	@JsonIgnore
	@OneToMany(mappedBy = "itemBorrowRequestUser", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<ItemLoanRequest> userItemBorrowRequests;
	
	@JsonIgnore
	@OneToMany(mappedBy = "itemBorrowRequestActivityUser", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<ItemLoanRequestActivity> userItemBorrowRequestActivities;

	@JsonIgnore
	@OneToMany(mappedBy = "itemBorrowRequestTxUser", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<ItemLoanRequestTx> userItemBorrowRequestTxs;
	
	//item lends
	
	@JsonIgnore
	@OneToMany(mappedBy = "itemLendOfferUser", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<ItemLoanOffer> userItemLendOffers;

	@JsonIgnore
	@OneToMany(mappedBy = "itemLendOfferActivityUser", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<ItemLoanOfferActivity> userItemLendOfferActivities;
	
	@JsonIgnore
	@OneToMany(mappedBy = "itemLendOfferTxUser", fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<ItemLoanOfferTx> userItemLendOfferTxs;
	
	//timebank
	
	@JsonIgnore
	@ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<Timebank> userTimebanks;
	
	@JsonIgnore
	@ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
	private List<User> userModeratorTimebanks;
	
	private Boolean active;

	@Override
	public String toString() {
		return "User [id=" + id + ", active=" + active + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((active == null) ? 0 : active.hashCode());
		result = prime * result + id;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (active == null) {
			if (other.active != null)
				return false;
		} else if (!active.equals(other.active))
			return false;
		if (id != other.id)
			return false;
		return true;
	}

}
